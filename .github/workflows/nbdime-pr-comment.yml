# .github/workflows/nbdime-pr-comment.yml
name: Jupyter Notebook Diff on PR

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  generate_nb_diff:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed to compare with base branch

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install nbdime
      run: pip install "nbdime>=1.1.0"

    - name: Get changed notebooks
      id: changed_files
      run: |
        # Compare the head of the PR branch to the base branch it's merging into
        CHANGED_NOTEBOOKS=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep ".ipynb$")
        echo "changed_notebooks=$CHANGED_NOTEBOOKS" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate and Comment nbdime diff
      # Only run if there are actual changed notebooks
      if: steps.changed_files.outputs.changed_notebooks != ''
      run: |
        DIFF_COMMENT=""
        # Iterate over each changed notebook path
        for NOTEBOOK_PATH in ${{ steps.changed_files.outputs.changed_notebooks }}; do
          # Generate nbdime diff for the current notebook against the base branch
          # --output-none: Exclude cell outputs
          # --no-metadata: Exclude cell metadata
          # --no-color: Remove ANSI color codes for cleaner output in GitHub comments
          NB_DIFF=$(nbdime diff --output-none --no-metadata --no-color ${{ github.event.pull_request.base.sha }} $NOTEBOOK_PATH)
          
          # If nbdime produced a diff (i.e., there were actual code changes)
          if [ -n "$NB_DIFF" ]; then
            DIFF_COMMENT="${DIFF_COMMENT}\n---\n### Code Changes for \`${NOTEBOOK_PATH}\`\n\`\`\`diff\n${NB_DIFF}\n\`\`\`\n"
          fi
        done

        if [ -n "$DIFF_COMMENT" ]; then
          # Use GitHub CLI (gh) to manage PR comments
          # gh is pre-installed on GitHub Actions runners

          # Try to find an existing comment to update it, identified by a hidden marker
          COMMENT_ID=$(gh pr comment list ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json id,body -q '.[] | select(.body | contains("")) | .id' || true)

          # Get current timestamp for "Last updated" message
          CURRENT_TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M UTC")

          # Construct the full comment body
          FULL_COMMENT_BODY="This comment shows the code-only diff for Jupyter notebooks in this PR.\n*Last updated: ${CURRENT_TIMESTAMP}*\n\n${DIFF_COMMENT}\n"

          if [ -n "$COMMENT_ID" ]; then
            # Update existing comment
            gh pr comment edit $COMMENT_ID --repo ${{ github.repository }} --body "$FULL_COMMENT_BODY"
          else
            # Create a new comment
            gh pr comment create ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --body "$FULL_COMMENT_BODY"
          fi
        else
          echo "No meaningful notebook diffs to comment on."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: bash
